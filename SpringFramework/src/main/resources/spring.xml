<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

<!--    Declare all the required objects bean by bean-->
<!--    If we need multiple objects of same class we will need to add it as bean with different id multiple times. -->
<!--    for wiring within objects we use ref attribute in property instead of value and pass the value of id of desired bean.-->
<!--    Singleton creates the single object of any bean in container while scope prototype can create multiple objects of single bean -->
    <bean id="alien" class="com.java.Alien">
<!--        example of setter injection-->
           <property name="age" value="20"/>
        <property name="ufo" ref="ufo"/>
    </bean>

    <bean id="ufo" class="com.java.UFO" scope="prototype">
        <property name="color" value="red"/>
    </bean>

<!--

We will be using interfaces to create dependency free code , more closely following the SOLID principles.

autowire attribute can be used with bean declaration to apply the automatic wiring with the existing beans of required type in config.
it can be done byType or byName

we use primary attribute to declare the primary bean to which autowiring will apply if found clashing beans.

we use lazy-init attribute to the bean declaration to lazily create the bean when required , while it still works in singleton scope, but is initialised lazily rather than
context creation.

we can getBean by type rather than name by declaring the required beans class type in getbean function invocation.

bean can be created inside the property tag for any other specific bean which only that bean can access and use and is known as inner bean.



-->

</beans>